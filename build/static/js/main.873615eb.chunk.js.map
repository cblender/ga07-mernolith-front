{"version":3,"sources":["components/Header.js","components/axios.js","components/Director.js","components/DirectorPage.js","components/Film.js","components/FilmPage.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","to","style","textDecoration","color","instance","axios","create","baseURL","Director","match","img","params","directorID","backgroundImage","borderRadius","DirectorPage","useState","directors","setDirectors","useEffect","a","get","res","console","log","data","fetchPosts","map","director","image","Film","FilmPage","films","setFilms","film","poster","Home","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0XAeeA,MAXf,WACE,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACnD,yCAAmB,O,gDCFZC,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,uC,MCaIC,MAXf,YAAmC,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IACzB,OACE,kBAAC,IAAD,CAAMV,GAAE,qBAAgBS,EAAME,OAAOC,aACnC,yBACEX,MAAO,CAAEY,gBAAgB,OAAD,OAASH,EAAT,KAAiBI,aAAc,OACvDf,UAAU,eCgCHgB,MA5Bf,WAAyB,IAAD,EACYC,mBAAS,MADrB,mBACfC,EADe,KACJC,EADI,KAatB,OAVAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBf,EAAMgB,IAAN,cADpB,cACQC,EADR,OAEEC,QAAQC,IAAIF,GACZJ,EAAaI,EAAIG,MAHnB,kBAISH,GAJT,4CADc,uBAAC,WAAD,wBAOdI,KACC,IAGD,yBAAK3B,UAAU,wBACZkB,GACC,oCACGA,EAAUU,KAAI,SAACC,GAAD,OACb,oCACE,kBAAC,EAAD,CAAUlB,IAAKkB,EAASC,e,mBCxBvBC,MANf,YAA8B,EAAdrB,MAAe,IAARC,EAAO,EAAPA,IACrB,OACE,yBAAKT,MAAO,CAAEY,gBAAgB,OAAD,OAASH,EAAT,MAAmBX,UAAU,UCqC/CgC,MA5Bf,WAAqB,IAAD,EACQf,mBAAS,MADjB,mBACXgB,EADW,KACJC,EADI,KAalB,OAVAd,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBf,EAAMgB,IAAN,UADpB,cACQC,EADR,OAEEC,QAAQC,IAAIF,GACZW,EAASX,EAAIG,MAHf,kBAISH,GAJT,4CADc,uBAAC,WAAD,wBAOdI,KACC,IAGD,yBAAK3B,UAAU,mBACZiC,GACC,oCACGA,EAAML,KAAI,SAACO,GAAD,OACT,oCACE,kBAAC,EAAD,CAAMxB,IAAKwB,EAAKC,gB,MCUfC,MAbf,WACE,OACE,yBAAKrC,UAAU,mBACb,kBAAC,IAAD,CAAMC,GAAG,aAAaC,MAAO,CAAEC,eAAgB,SAC7C,yBAAKH,UAAU,QAAf,cAEF,kBAAC,IAAD,CAAMC,GAAG,SAASC,MAAO,CAAEC,eAAgB,SACzC,yBAAKH,UAAU,QAAf,YCCOsC,MArBf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CACEF,OAAK,EACLC,KAAK,aACLC,OAAQ,gBAAG/B,EAAH,EAAGA,MAAH,OAAe,kBAAC,EAAD,CAAcA,MAAOA,OAE9C,kBAAC,IAAD,CACE6B,OAAK,EACLC,KAAK,SACLC,OAAQ,gBAAG/B,EAAH,EAAGA,MAAH,OAAe,kBAAC,EAAD,CAAUA,MAAOA,UCnB9BgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnC,MACvB,2DCXNoC,IAASL,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.873615eb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n  return (\n    <div className=\"navbar\">\n      <Link to=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\n        <h1>MERNOLITH</h1>{\" \"}\n        {/* UPDATE: change \"MERNOLITH\" to a JS variable that we can pass page title data to. */}\n      </Link>\n    </div>\n  );\n}\n\nexport default Header;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://mernolithv2.herokuapp.com/\",\n});\n\nexport default instance;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Director.css\";\n\nfunction Director({ match, img }) {\n  return (\n    <Link to={`/directors/${match.params.directorID}`}>\n      <div\n        style={{ backgroundImage: `url(${img})`, borderRadius: \"3px\" }}\n        className=\"director\"\n      ></div>\n    </Link>\n  );\n}\n\nexport default Director;\n","/*$$      /$$ /$$$$$$$$ /$$$$$$$  /$$   /$$           /$$ /$$   /$$     /$$      \n| $$$    /$$$| $$_____/| $$__  $$| $$$ | $$          | $$|__/  | $$    | $$      \n| $$$$  /$$$$| $$      | $$  \\ $$| $$$$| $$  /$$$$$$ | $$ /$$ /$$$$$$  | $$$$$$$ \n| $$ $$/$$ $$| $$$$$   | $$$$$$$/| $$ $$ $$ /$$__  $$| $$| $$|_  $$_/  | $$__  $$\n| $$  $$$| $$| $$__/   | $$__  $$| $$  $$$$| $$  \\ $$| $$| $$  | $$    | $$  \\ $$\n| $$\\  $ | $$| $$      | $$  \\ $$| $$\\  $$$| $$  | $$| $$| $$  | $$ /$$| $$  | $$\n| $$ \\/  | $$| $$$$$$$$| $$  | $$| $$ \\  $$|  $$$$$$/| $$| $$  |  $$$$/| $$  | $$\n|__/     |__/|________/|__/  |__/|__/  \\__/ \\______/ |__/|__/   \\___/  |__/  |_*/\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./DirectorPage.css\";\nimport axios from \"./axios\";\nimport Director from \"./Director\";\n\nfunction DirectorPage() {\n  const [directors, setDirectors] = useState(null);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await axios.get(`/directors`);\n      console.log(res);\n      setDirectors(res.data);\n      return res;\n    }\n    fetchPosts();\n  }, []);\n\n  return (\n    <div className=\"directors__container\">\n      {directors && (\n        <>\n          {directors.map((director) => (\n            <>\n              <Director img={director.image} />\n            </>\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default DirectorPage;\n","import React, { useState } from \"react\";\nimport \"./Film.css\";\n\nfunction Film({ match, img }) {\n  return (\n    <div style={{ backgroundImage: `url(${img})` }} className=\"film\"></div>\n  );\n}\n\nexport default Film;\n","/*$$      /$$ /$$$$$$$$ /$$$$$$$  /$$   /$$           /$$ /$$   /$$     /$$      \n| $$$    /$$$| $$_____/| $$__  $$| $$$ | $$          | $$|__/  | $$    | $$      \n| $$$$  /$$$$| $$      | $$  \\ $$| $$$$| $$  /$$$$$$ | $$ /$$ /$$$$$$  | $$$$$$$ \n| $$ $$/$$ $$| $$$$$   | $$$$$$$/| $$ $$ $$ /$$__  $$| $$| $$|_  $$_/  | $$__  $$\n| $$  $$$| $$| $$__/   | $$__  $$| $$  $$$$| $$  \\ $$| $$| $$  | $$    | $$  \\ $$\n| $$\\  $ | $$| $$      | $$  \\ $$| $$\\  $$$| $$  | $$| $$| $$  | $$ /$$| $$  | $$\n| $$ \\/  | $$| $$$$$$$$| $$  | $$| $$ \\  $$|  $$$$$$/| $$| $$  |  $$$$/| $$  | $$\n|__/     |__/|________/|__/  |__/|__/  \\__/ \\______/ |__/|__/   \\___/  |__/  |_*/\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./FilmPage.css\";\nimport axios from \"./axios\";\nimport Film from \"./Film\";\n\nfunction FilmPage() {\n  const [films, setFilms] = useState(null);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await axios.get(`/films`);\n      console.log(res);\n      setFilms(res.data);\n      return res;\n    }\n    fetchPosts();\n  }, []);\n\n  return (\n    <div className=\"film__container\">\n      {films && (\n        <>\n          {films.map((film) => (\n            <>\n              <Film img={film.poster} />\n            </>\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default FilmPage;\n","/*$$      /$$ /$$$$$$$$ /$$$$$$$  /$$   /$$           /$$ /$$   /$$     /$$      \n| $$$    /$$$| $$_____/| $$__  $$| $$$ | $$          | $$|__/  | $$    | $$      \n| $$$$  /$$$$| $$      | $$  \\ $$| $$$$| $$  /$$$$$$ | $$ /$$ /$$$$$$  | $$$$$$$ \n| $$ $$/$$ $$| $$$$$   | $$$$$$$/| $$ $$ $$ /$$__  $$| $$| $$|_  $$_/  | $$__  $$\n| $$  $$$| $$| $$__/   | $$__  $$| $$  $$$$| $$  \\ $$| $$| $$  | $$    | $$  \\ $$\n| $$\\  $ | $$| $$      | $$  \\ $$| $$\\  $$$| $$  | $$| $$| $$  | $$ /$$| $$  | $$\n| $$ \\/  | $$| $$$$$$$$| $$  | $$| $$ \\  $$|  $$$$$$/| $$| $$  |  $$$$/| $$  | $$\n|__/     |__/|________/|__/  |__/|__/  \\__/ \\______/ |__/|__/   \\___/  |__/  |_*/\n\nimport React from \"react\";\nimport \"./Home.css\";\nimport { Link } from \"react-router-dom\";\n/*\nfetchDirectorList = () => {\n  fetch()\n    .then((response) => response.json())\n    .then((alldirectors) => {\n      console.log(\"========================================\");\n      console.log(alldirectors);\n      console.log(\"========================================\");\n      alldirectors.results.forEach((director) => {\n        let directorList =\n          // STATE - list of directors - should be empty at this point\n          directorList.push(director);\n        // SET STATE: list of directors = directorList\n      });\n    });\n  console.log(// STATE: list of directors);\n};\n*/\nfunction Home() {\n  return (\n    <div className=\"home__container\">\n      <Link to=\"/directors\" style={{ textDecoration: \"none\" }}>\n        <div className=\"link\">directors</div>\n      </Link>\n      <Link to=\"/films\" style={{ textDecoration: \"none\" }}>\n        <div className=\"link\">films</div>\n      </Link>\n    </div>\n  );\n}\n\nexport default Home;\n","/*$$      /$$ /$$$$$$$$ /$$$$$$$  /$$   /$$           /$$ /$$   /$$     /$$      \n| $$$    /$$$| $$_____/| $$__  $$| $$$ | $$          | $$|__/  | $$    | $$      \n| $$$$  /$$$$| $$      | $$  \\ $$| $$$$| $$  /$$$$$$ | $$ /$$ /$$$$$$  | $$$$$$$ \n| $$ $$/$$ $$| $$$$$   | $$$$$$$/| $$ $$ $$ /$$__  $$| $$| $$|_  $$_/  | $$__  $$\n| $$  $$$| $$| $$__/   | $$__  $$| $$  $$$$| $$  \\ $$| $$| $$  | $$    | $$  \\ $$\n| $$\\  $ | $$| $$      | $$  \\ $$| $$\\  $$$| $$  | $$| $$| $$  | $$ /$$| $$  | $$\n| $$ \\/  | $$| $$$$$$$$| $$  | $$| $$ \\  $$|  $$$$$$/| $$| $$  |  $$$$/| $$  | $$\n|__/     |__/|________/|__/  |__/|__/  \\__/ \\______/ |__/|__/   \\___/  |__/  |_*/\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header.js\";\nimport DirectorPage from \"./DirectorPage\";\nimport { Route } from \"react-router-dom\";\nimport FilmPage from \"./FilmPage\";\nimport Home from \"./Home\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <main>\n        <Route exact path=\"/\" render={() => <Home />} />\n        <Route\n          exact\n          path=\"/directors\"\n          render={({ match }) => <DirectorPage match={match} />}\n        />\n        <Route\n          exact\n          path=\"/films\"\n          render={({ match }) => <FilmPage match={match} />}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./components/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}